{
  "name": "Ajcoapbridge",
  "tagline": "The bridge enables AllJoyn applications to interact with CoAP devices",
  "body": "# AJCoAPBridge\r\n**AJCoAPBridge** is an application that enables AllJoyn applications to interact with CoAP devices.\r\n\r\n## Configuration\r\n### Obtain the AllJoyn source\r\nThe bridge requires the AllJoyn framework to run.\r\nThe framework source can be obtained in the AllSeen Alliance [download page](https://allseenalliance.org/framework/download).\r\nThe bridge was developed using AllJoyn v15.09 and it requires that version or later ones.\r\n\r\n### Building the AllJoyn Framework\r\nDepending on the target platform, check out the recommended steps to build AllJoyn following the [building documentation](https://allseenalliance.org/framework/documentation/develop/building).\r\n**AJCoAPBridge** was tested on Linux, Windows and Mac OS X.\r\n\r\nThe default SCons script tries to build all of the language bindings by default.\r\nWe are only interested in the Java language binding, so the BINDINGS option can be used to select the language of interest.\r\n```\r\n$ scons BINDINGS=java\r\n```\r\n\r\nWhat **AJCoAPBridge** needs are the _alljoyn.jar_ file and the _liballjoyn_java.so_ (or _liballjoyn_java.dylib_ or _liballjoyn_java.dll_) libraries.\r\n\r\n## Installation\r\nIn order to install **AJCoAPBridge** you have to compile the source with Maven.\r\nBefore it, you need to include the AllJoyn library. Starting from the root directory (where the _pom.xml_ file is), put _alljoyn.jar_ in the _/jar_ directory and the _liballjoyn.so_ file in the _/lib_ directory.\r\nThen, run the Maven installer:\r\n```\r\n$ mvn clean install\r\n```\r\n\r\n## Execution\r\nThe executable JAR file is in the _/target_ directory. In order to include the AllJoyn native library, run it with the _java.library.path_ option set to the _/lib_ folder:\r\n```\r\n$ java -Djava.library.path=lib -jar target/bridge-0.0.1-SNAPSHOT-jar-with-dependencies.jar\r\n```\r\n\r\n## User Guide\r\n### CoAP Server\r\nA CoAP device that wants to provide its resources to the AllJoyn network has to register on the bridge using its Resource Directory.\r\nThe resources registration is done by sending a *POST* request with */{+rd}{?ep,lt,con}* as URI template, where:\r\n- *ep* is the endpoint name (mandatory)\r\n- *lt* is the lifetime on the bridge (optional)\r\n- *con* is the endpoint context, if different from the source IP address and port (optional)\r\n\r\nIn the payload the CoAP server should include the resources it wants to register as shown in the following example:\r\n```\r\n</sensors/temp>;ct=41;rt=\"temperature-c\";if=\"sensor\",\r\n</sensors/light>;ct=41;rt=\"light-lux\";if=\"sensor\"\r\n```\r\nThe Resource Directory then returns the resources location.\r\nAn endpoint must use that location when refreshing or deleting registrations using this interface.\r\n\r\n### AllJoyn Client Application\r\n#### Discovery\r\nThe bridge sends out about data every time a new CoAP resource is made available or removed. The about data is described in the [About definition](https://allseenalliance.org/framework/documentation/learn/core/about-announcement/interface)\r\nand it contains all the AllJoyn paths of the objects provided by the bridge. Each of these object represent a CoAP resource.\r\n\r\nAn AllJoyn client can obtain the bridge about data by looking for the _com.bridge.Coap_ interface:\r\n```\r\nStatus status = mBus.whoImplements(\"com.bridge.Coap\");\r\n```\r\n\r\n#### AllJoyn Objects\r\nAn AllJoyn client can interact with CoAP resources using a proxy object (a representation of the _CoAPResource_ object provided by the bridge) on which it can call methods.\r\nIn order to obtain a proxy object, the object path has to be specified (known or taken from the about data):\r\n```\r\nmProxyObj =  mBus.getProxyBusObject(\"com.bridge.coap\",objectPath,sessionId.value,new Class<?>[] { CoAPInterface.class, Properties.class, AllSeenIntrospectable.class});\r\n```\r\nThe AllJoyn objects implement the _com.bridge.Coap_ interface and implement the RESTful methods:\r\n- _get_\r\n- _post_\r\n- _delete_\r\n\r\nRequest and response messages (function parameter and returned value, respectively) are represented by the _RequestMessage_ and the _ResponseMessage_ classes.\r\n\r\nThe interface allows the client to read the resource attributes via its property functions:\r\n- _getInterfaceDescription_\r\n- _getResourceType_\r\n\r\n#### Observing Service\r\n**AJCoAPBridge** also implements the observing service. An AllJoyn application interested into observing a resource calls the _registration_ method on the object representing that resource.\r\nThen, it can stop receiving notifications using the _cancellation_ method.\r\n\r\nThe bridge forwards notifications using signals. In order to receive these notifications a client application must register the interest in a signal by calling the _AddMatch_ method, in which it specifies the object interface and path:\r\n```\r\nStatus status = mBus.addMatch(\"interface='com.bridge.Coap',path='/rd/4521/sensors/temp'\");\r\n```\r\n\r\nThe client must implement a signal handler to respond to the signal for which it has registered.\r\nIt is done implementing a class that contains a method with the _@BusSignalHandler_ annotation.\r\n```\r\npublic static class MySignalHandler  {\r\n    @BusSignalHandler(iface=\"it.dc.ajtest.CoAPInterface\", signal=\"notification\")\r\n\t\tpublic void notification(ResponseMessage message) {\r\n\t\t\t// do something\r\n\t\t}\r\n\t}\r\n```\r\nThen, the client must register the implemented signal handler:\r\n```\r\nstatus = mBus.registerSignalHandlers(mySignalHandler);\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}